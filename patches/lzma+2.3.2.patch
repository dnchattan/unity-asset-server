diff --git a/node_modules/lzma/src/lzma_worker.js b/node_modules/lzma/src/lzma_worker.js
index d8acf43..a0b2d94 100644
--- a/node_modules/lzma/src/lzma_worker.js
+++ b/node_modules/lzma/src/lzma_worker.js
@@ -312,29 +312,30 @@ var LZMA = (function () {
         if (!$SetDecoderProperties(decoder, properties)) {
             throw new Error("corrupted input");
         }
-        for (i = 0; i < 64; i += 8) {
-            r = $read(input);
-            if (r == -1)
-                throw new Error("truncated input");
-            r = r.toString(16);
-            if (r.length == 1) r = "0" + r;
-            hex_length = r + "" + hex_length;
-        }
-        
-        /// Was the length set in the header (if it was compressed from a stream, the length is all f"s).
-        if (/^0+$|^f+$/i.test(hex_length)) {
-            /// The length is unknown, so set to -1.
-            this$static.length_0 = N1_longLit;
-        } else {
-            ///NOTE: If there is a problem with the decoder because of the length, you can always set the length to -1 (N1_longLit) which means unknown.
-            tmp_length = parseInt(hex_length, 16);
-            /// If the length is too long to handle, just set it to unknown.
-            if (tmp_length > 4294967295) {
-                this$static.length_0 = N1_longLit;
-            } else {
-                this$static.length_0 = fromInt(tmp_length);
-            }
-        }
+        // for (i = 0; i < 64; i += 8) {
+        //     r = $read(input);
+        //     if (r == -1)
+        //         throw new Error("truncated input");
+        //     r = r.toString(16);
+        //     if (r.length == 1) r = "0" + r;
+        //     hex_length = r + "" + hex_length;
+        // }
+        
+        // /// Was the length set in the header (if it was compressed from a stream, the length is all f"s).
+        // if (/^0+$|^f+$/i.test(hex_length)) {
+        //     /// The length is unknown, so set to -1.
+        //     this$static.length_0 = N1_longLit;
+        // } else {
+        //     ///NOTE: If there is a problem with the decoder because of the length, you can always set the length to -1 (N1_longLit) which means unknown.
+        //     tmp_length = parseInt(hex_length, 16);
+        //     /// If the length is too long to handle, just set it to unknown.
+        //     if (tmp_length > 4294967295) {
+        //         this$static.length_0 = N1_longLit;
+        //     } else {
+        //         this$static.length_0 = fromInt(tmp_length);
+        //     }
+        // }
+        this$static.length_0 = N1_longLit;
         
         this$static.chunker = $CodeInChunks(decoder, input, output, this$static.length_0);
     }
